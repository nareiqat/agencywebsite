---
// src/components/Chatbot.astro
import { Image } from "astro:assets";
import LogoWhite from "../assets/svgs/LogoWhite.svg";
---

<!-- MIT License You are free: to share – to copy, distribute and transmit the work
to remix – to adapt the work Under the following terms: liability – the author
doesn't provide any warranty and doesn't accepts any liability copyright notice
– a copy of the license or copyright notice must be included with software share
alike – If you remix, transform, or build upon the material, you can distribute
your work under any license -->
<div id="chatbot-container" class="chatbot-container">
  <!-- Chat Toggle Button -->
  <button id="chat-toggle" class="chat-toggle" aria-label="Open chat">
    <svg
      class="chat-icon"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
    >
      <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
      ></path>
    </svg>
    <svg
      class="close-icon hidden"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
    >
      <line x1="18" y1="6" x2="6" y2="18"></line>
      <line x1="6" y1="6" x2="18" y2="18"></line>
    </svg>
  </button>

  <!-- Chat Window -->
  <div id="chat-window" class="chat-window hidden">
    <!-- Chat Header -->
    <div class="chat-header">
      <div class="header-content">
        <div class="agency-logo">
          <div class="logo-circle">N</div>
          <div>
            <h3>NCATBOT</h3>
            <p>Website Development Support</p>
          </div>
        </div>
        <button
          id="minimize-chat"
          class="minimize-btn"
          aria-label="Minimize chat"
        >
          <svg
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
        </button>
      </div>
    </div>

    <!-- Chat Messages -->
    <div id="chat-messages" class="chat-messages">
      <div class="message bot-message">
        <div class="message-avatar">
          <div class="avatar-circle">
            <svg
              viewBox="0 0 64 64"
              xmlns="http://www.w3.org/2000/svg"
              xmlns:xlink="http://www.w3.org/1999/xlink"
              aria-hidden="true"
              role="img"
              class="iconify iconify--emojione"
              preserveAspectRatio="xMidYMid meet"
              fill="#000000"
              ><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g
                id="SVGRepo_tracerCarrier"
                stroke-linecap="round"
                stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier">
                <path
                  d="M60.9 2c1.8 13.4 1.5 24.2-1.2 31.1L34.9 14.7C39.8 9.6 49.8 3.5 60.9 2z"
                  fill="#dadee0"
                >
                </path>
                <path
                  d="M57.7 32.2L47.5 18.9s1.9-7.3 11.6-12.4c2.9 11.6-1.4 25.7-1.4 25.7"
                  fill="#f7a4a4"
                >
                </path>
                <path
                  d="M53.8 29.2L47.5 21s2.6-5 8.6-8.2c-3.5 7.5-2.3 16.4-2.3 16.4"
                  fill="#f78d8d"
                >
                </path>
                <path
                  d="M3.1 2C1.3 15.4 1.6 26.2 4.3 33.1l24.8-18.5C24.2 9.6 14.2 3.5 3.1 2z"
                  fill="#dadee0"
                >
                </path>
                <path
                  d="M6.3 32.2l10.3-13.3S14.7 11.6 5 6.5C2 18.1 6.3 32.2 6.3 32.2"
                  fill="#f7a4a4"
                >
                </path>
                <path
                  d="M10.2 29.2l6.4-8.2S14 16 8 12.8c3.4 7.5 2.2 16.4 2.2 16.4"
                  fill="#f78d8d"
                >
                </path>
                <path
                  d="M58.2 50.8c.8-.9 1.4-1.6 1.7-2.2c1.6-2.6 2.1-5.3 2.1-5.3l-2 .4s2.3-2.5 1.7-7.8l-2 2.1s1.9-5.4.3-10.4l-2.2 1.6s.7-2 .1-3.4l-.9.7s1.7-4.7.2-6.6c-.9 2.8-1.9 2.8-1.9 2.8s1.2-2.1.3-3c-1 1.6-1.8.6-1.8.1c.1-.6-.2-1.5 2.7-2c-2.3-1.4-5.1-.4-5.1-.4s.1-1.5 2.1-1.4c-1.9-1.6-4.5-.6-4.5-.6c-4.1-3.1-9.6-4.9-17.1-4.9c-7.4 0-12.9 1.8-17.1 4.9c0 0-2.6-.9-4.5.6c2-.1 2.1 1.4 2.1 1.4s-2.7-1-5.1.4c2.9.4 2.7 1.3 2.7 2c0 .5-.8 1.5-1.8-.1c-1 .9.3 3 .3 3s-1 0-1.9-2.8c-1.5 2 .2 6.6.2 6.6l-.9-.7c-.6 1.4.1 3.4.1 3.4l-2-1.6c-1.7 5 .3 10.4.3 10.4l-1.9-2.1C1.7 41.2 4 43.7 4 43.7l-2-.4s.5 2.7 2.1 5.3c.2.5.8 1.3 1.7 2.2l.1.1C10 55 20.1 62 32 62s22-7 26.1-11.1c0-.1.1-.1.1-.1"
                  fill="#dadee0"
                >
                </path>
                <g fill="#94989b">
                  <path
                    d="M37.7 10.8c-1.8-.3-3.7-.4-5.7-.4s-3.9.1-5.7.4c.7 3.9 2.8 6.6 5.7 11.6c3-5.1 5-7.8 5.7-11.6"
                  >
                  </path>
                  <path
                    d="M46.8 13.8c-1.9-1.1-4.1-1.9-6.5-2.5c.6 2.3 1.9 3.9 3.6 6.9c1.3-2.1 2.2-2.7 2.9-4.4"
                  >
                  </path>
                  <path
                    d="M23.7 11.3c-2.5.6-4.6 1.4-6.5 2.5c.7 1.8 1.7 2.3 2.9 4.4c1.8-3.1 3-4.7 3.6-6.9"
                  >
                  </path>
                </g>
                <path
                  d="M36 38.8c-.8-.9-3.3-1-4-1c-.7 0-3.2.1-4 1c-.6.7-.1 2.3 1.4 3.8c1 .9 1.9 1.2 2.6 1.2c.7 0 1.7-.3 2.6-1.2c1.6-1.5 2-3.2 1.4-3.8"
                  fill="#4c5359"
                >
                </path>
                <path
                  d="M24.3 30.8s-.5-3.6-4.5-5c-4.5-1.7-7.6 1.4-8.5 3.7c-1.2 3.4.3 7.1.8 8c.3.6 3.7 3.2 11.2.7c0 0 1.9-3.8 1-7.4"
                  fill="#ffffff"
                >
                </path>
                <path
                  d="M24.3 30.8S18.4 26 18 26c-1.5 0-2.8-.4-3.9.6s-1.9 2.3-2.3 3.7c-.4 1.4-.3 3 0 4.4c.2.7.4 1.5.7 2.2l.1.2c0-.1 0 0 0 0l.1.1c.1.1.2.2.4.3c.3.2.6.4.9.5c1.4.6 2.9.8 4.5.8s3.2-.3 4.8-.7c-1.5.7-3.1 1.1-4.7 1.4c-1.6.2-3.4.2-5-.4c-.4-.1-.8-.3-1.2-.6c-.2-.1-.4-.3-.6-.4c-.1 0-.1-.1-.2-.2l-.1-.1l-.1-.1l-.2-.3c-.4-.8-.7-1.6-.9-2.4c-.4-1.6-.5-3.4-.1-5.1c.5-1.7 1.5-3.2 2.8-4.4c1.3-1.1 3.1-.9 4.9-.7c.6.1 6.4 6 6.4 6"
                  fill="#b2b6b8"
                >
                </path>
                <path
                  d="M39.7 30.8s.5-3.6 4.5-5c4.5-1.7 7.6 1.4 8.5 3.7c1.2 3.4-.3 7.1-.8 8c-.3.6-3.7 3.2-11.2.7c0 0-1.9-3.8-1-7.4"
                  fill="#ffffff"
                >
                </path>
                <path
                  d="M39.7 30.8s5.8-5.9 6.2-6c1.8-.2 3.6-.4 4.9.7c1.3 1.2 2.3 2.6 2.8 4.4c.4 1.7.3 3.5-.1 5.2c-.2.8-.5 1.6-.9 2.4l-.2.3l-.1.1v.1l-.2.2c-.2.2-.4.3-.6.4l-1.2.6c-1.7.6-3.4.6-5 .4c-1.6-.3-3.2-.7-4.7-1.4c1.6.3 3.2.6 4.8.7c1.6 0 3.2-.2 4.5-.8c.3-.1.7-.3.9-.5c.1-.1.3-.2.4-.3l.1-.1l.1-.2c.3-.7.5-1.4.7-2.2c.3-1.5.4-3 0-4.4c-.4-1.4-1.2-2.7-2.3-3.7c-1.1-1-2.4-.6-3.9-.6c-.3-.1-6.2 4.7-6.2 4.7"
                  fill="#b2b6b8"
                >
                </path>
                <g fill="#4c5359">
                  <ellipse cx="44" cy="32.5" rx="4" ry="4.5"> </ellipse>
                  <ellipse cx="20" cy="32.5" rx="4" ry="4.5"> </ellipse>
                  <path
                    d="M55.9 24.5c-1.9.2-3.5.5-5.2.9c-1.6.4-3.1 1-4.6 1.7c-1.5.7-2.9 1.5-4.2 2.4c-1.4 1-2.6 2.1-4 3.4c.2-1.9 1.1-3.7 2.4-5.1c1.2-1.5 2.9-2.6 4.6-3.4c1.8-.8 3.7-1.3 5.6-1.3c1.9 0 3.8.4 5.4 1.4"
                  >
                  </path>
                  <path
                    d="M8.1 24.5c1.6-1 3.5-1.5 5.4-1.4c1.9 0 3.8.5 5.6 1.3c1.7.8 3.3 2 4.6 3.4c1.2 1.5 2.2 3.2 2.4 5.1c-1.3-1.3-2.6-2.4-4-3.4s-2.8-1.8-4.2-2.4c-1.5-.7-3-1.2-4.6-1.7c-1.7-.4-3.3-.7-5.2-.9"
                  >
                  </path>
                  <path
                    d="M25.8 53.5c5.8 1.4 15.1 0 19.8-3.5c1.2-.9-1.2-4-2.3-3.1c-3.2 2.3-11.2 4.1-16.6 2.9c-1.4-.4-2.4 3.3-.9 3.7"
                  >
                  </path>
                </g>
              </g></svg
            >
          </div>
        </div>
        <div class="message-content">
          <p>Hi! I'm here to help with your website development needs. How can I assist you today?
          </p>
          <span class="message-time" id="welcome-time"></span>
        </div>
      </div>
    </div>

    <!-- Typing Indicator -->
    <div id="typing-indicator" class="typing-indicator hidden">
      <div class="message-avatar">
        <div class="avatar-circle">
        </div>
      </div>
      <div class="typing-dots">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </div>

    <!-- Chat Input -->
    <div class="chat-input-container">
      <form id="chat-form" class="chat-form">
        <input
          type="text"
          id="chat-input"
          placeholder="Type your message..."
          autocomplete="off"
          maxlength="500"
        />
        <button
          type="submit"
          id="send-btn"
          class="send-btn"
          aria-label="Send message"
        >
          <svg
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <line x1="22" y1="2" x2="11" y2="13"></line>
            <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
          </svg>
        </button>
      </form>
    </div>
  </div>
</div>

<style is:global>
  .chatbot-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      sans-serif;
  }

  .chat-toggle {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.3s ease;
    color: white;
  }

  .chat-toggle:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
  }

  .chat-toggle svg {
    width: 24px;
    height: 24px;
  }

  .chat-window {
    position: absolute;
    bottom: 80px;
    right: 0;
    width: 350px;
    height: 500px;
    background: white;
    border-radius: 16px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
    display: flex;
    flex-direction: column;
    transition: all 0.3s ease;
    border: 1px solid #e1e5e9;
  }

  .chat-window.hidden {
    opacity: 0;
    transform: translateY(20px);
    pointer-events: none;
  }

  .chat-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 16px;
    border-radius: 16px 16px 0 0;
  }

  .header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .agency-logo {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .logo-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 18px;
  }

  .agency-logo h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
  }

  .agency-logo p {
    margin: 0;
    font-size: 12px;
    opacity: 0.9;
  }

  .minimize-btn {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: background-color 0.2s ease;
  }

  .minimize-btn:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .minimize-btn svg {
    width: 20px;
    height: 20px;
  }

  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .chat-messages::-webkit-scrollbar {
    width: 4px;
  }

  .chat-messages::-webkit-scrollbar-track {
    background: #f1f1f1;
  }

  .chat-messages::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 2px;
  }

  .message {
    display: flex;
    gap: 8px;
    animation: fadeIn 0.3s ease;
  }

  .message.user-message {
    flex-direction: row-reverse;
  }

  .message-avatar {
    flex-shrink: 0;
  }

  .cat-icon {
    width: 16px;
    height: 16px;
    color: white;
    display: none;;
  }

  .avatar-circle {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    font-weight: 600;
    color: white;
  }

  .bot-message .avatar-circle {
    /* background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); */
    background-image: url("../assets/svgs/chatboticon.svg");
  }

  .user-message .avatar-circle {
    background: #4f46e5;
  }

  .message-content {
    flex: 1;
    max-width: 90%;
  }

  .message-content p {
    background: #f8f9fa;
    padding: 12px 16px;
    border-radius: 18px;
    margin: 0;
    line-height: 1.4;
    font-size: 14px;
    color: #333;
    white-space: break-spaces;
  }

  .user-message .message-content p {
    background: #4f46e5;
    color: white;
  }

  .message-time {
    font-size: 11px;
    color: #888;
    margin-top: 4px;
    display: block;
  }

  .typing-indicator {
    display: flex;
    gap: 8px;
    align-items: center;
    padding: 0 16px 16px;
  }

  .typing-dots {
    background: #f8f9fa;
    padding: 12px 16px;
    border-radius: 18px;
    display: flex;
    gap: 4px;
  }

  .typing-dots span {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: #888;
    animation: typing 1.4s infinite ease-in-out;
  }

  .typing-dots span:nth-child(2) {
    animation-delay: 0.2s;
  }

  .typing-dots span:nth-child(3) {
    animation-delay: 0.4s;
  }

  .chat-input-container {
    padding: 16px;
    border-top: 1px solid #e1e5e9;
  }

  .chat-form {
    display: flex;
    gap: 8px;
    align-items: center;
  }

  #chat-input {
    flex: 1;
    padding: 12px 16px;
    border: 1px solid #e1e5e9;
    border-radius: 24px;
    outline: none;
    font-size: 14px;
    transition: border-color 0.2s ease;
  }

  #chat-input:focus {
    border-color: #667eea;
  }

  .send-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #4f46e5;
    border: none;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .send-btn:hover:not(:disabled) {
    background: #4338ca;
    transform: scale(1.05);
  }

  .send-btn:disabled {
    background: #9ca3af;
    cursor: not-allowed;
  }

  .send-btn svg {
    width: 18px;
    height: 18px;
  }

  .hidden {
    display: none !important;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes typing {
    0%,
    60%,
    100% {
      transform: translateY(0);
    }
    30% {
      transform: translateY(-10px);
    }
  }

  /* Mobile Responsiveness */
  @media (max-width: 480px) {
    .chatbot-container {
      bottom: 10px;
      right: 10px;
      left: 10px;
    }

    .chat-window {
      width: 100%;
      right: 0;
      bottom: 80px;
      height: 70vh;
      max-height: 500px;
    }

    .chat-toggle {
      position: fixed;
      bottom: 20px;
      right: 20px;
    }
  }
</style>

<script>
  type Message = {
    content: string;
    sender: "user" | "bot";
    timestamp: Date;
  };

  class Chatbot {
    isOpen = false;
    isTyping = false;
    messages: Message[] = [];
    chatToggle;
    chatWindow;
    chatMessages;
    chatForm;
    chatInput;
    sendBtn;
    minimizeBtn;
    typingIndicator;
    chatIcon;
    closeIcon;

    constructor() {
      this.messages = [];
      this.isOpen = false;
      this.isTyping = false;

      this.initializeElements();
      this.attachEventListeners();
      this.setWelcomeTime();
    }

    initializeElements() {
      this.chatToggle = document.getElementById("chat-toggle");
      this.chatWindow = document.getElementById("chat-window");
      this.chatMessages = document.getElementById("chat-messages");
      this.chatForm = document.getElementById("chat-form");
      this.chatInput = document.getElementById("chat-input");
      this.sendBtn = document.getElementById("send-btn");
      this.minimizeBtn = document.getElementById("minimize-chat");
      this.typingIndicator = document.getElementById("typing-indicator");
      this.chatIcon = this.chatToggle.querySelector(".chat-icon");
      this.closeIcon = this.chatToggle.querySelector(".close-icon");
    }

    attachEventListeners() {
      this.chatToggle.addEventListener("click", () => this.toggleChat());
      this.minimizeBtn.addEventListener("click", () => this.toggleChat());
      this.chatForm.addEventListener("submit", (e) => this.handleSubmit(e));
      this.chatInput.addEventListener("input", () => this.handleInput());
    }

    setWelcomeTime() {
      const welcomeTime = document.getElementById("welcome-time");
      if (welcomeTime) {
        welcomeTime.textContent = new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });
      }
    }

    toggleChat() {
      this.isOpen = !this.isOpen;

      if (this.isOpen) {
        this.chatWindow.classList.remove("hidden");
        this.chatIcon.classList.add("hidden");
        this.closeIcon.classList.remove("hidden");
        this.chatInput.focus();
      } else {
        this.chatWindow.classList.add("hidden");
        this.chatIcon.classList.remove("hidden");
        this.closeIcon.classList.add("hidden");
      }
    }

    handleInput() {
      const hasText = this.chatInput.value.trim().length > 0;
      this.sendBtn.disabled = !hasText || this.isTyping;
    }

    async handleSubmit(e) {
      e.preventDefault();

      const message = this.chatInput.value.trim();
      if (!message || this.isTyping) return;

      // Add user message
      this.addMessage(message, "user");
      this.chatInput.value = "";
      this.sendBtn.disabled = true;

      // Show typing indicator
      this.showTyping();

      try {
        // Send message to API
        const response = await this.sendMessageToAPI(message);

        // Hide typing indicator
        this.hideTyping();

        // Add bot response
        this.addMessage(response, "bot");
      } catch (error) {
        console.error("Error sending message:", error);
        this.hideTyping();
        this.addMessage(
          "Sorry, I encountered an error. Please try again or contact us at nabeelardevelops@gmail.com",
          "bot"
        );
      }
    }

    addMessage(content, sender) {
      const messageDiv = document.createElement("div");
      messageDiv.className = `message ${sender}-message`;

      const time = new Date().toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      });

      const avatar =
        sender === "user"
          ? "U"
          : `
          <svg viewBox="0 0 24 24" fill="currentColor" class="cat-icon">
            <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2M21 9V7L15 13L13.5 7.5C13.1 6.8 12.6 6.3 12 6.1C11.4 6.3 10.9 6.8 10.5 7.5L9 13L3 7V9C3 10.1 3.9 11 5 11V12.5C3.9 12.5 3 13.4 3 14.5S3.9 16.5 5 16.5V18C5 19.1 5.9 20 7 20H17C18.1 20 19 19.1 19 18V16.5C20.1 16.5 21 15.6 21 14.5S20.1 12.5 19 12.5V11C20.1 11 21 10.1 21 9Z"/>
          </svg>
        `;

      messageDiv.innerHTML = `
          <div class="message-avatar">
            <div class="avatar-circle">${avatar}</div>
          </div>
          <div class="message-content">
            <p>${content}</p>
            <span class="message-time">${time}</span>
          </div>
        `;

      this.chatMessages.appendChild(messageDiv);
      this.scrollToBottom();

      // Store message
      this.messages.push({ content, sender, timestamp: new Date() });
    }

    showTyping() {
      this.isTyping = true;
      this.typingIndicator.classList.remove("hidden");
      this.scrollToBottom();
    }

    hideTyping() {
      this.isTyping = false;
      this.typingIndicator.classList.add("hidden");
    }

    scrollToBottom() {
      setTimeout(() => {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
      }, 100);
    }

    async sendMessageToAPI(message) {
      const messages = [
        ...this.messages.map((msg) => ({
          role: msg.sender === "user" ? "user" : "assistant",
          content: msg.content,
        })),
        { role: "user", content: message },
      ];

      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ messages }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Handle streaming response
      if (!response.body) {
        throw new Error("No response body received from the server.");
      }
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let result = "";

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value);
        const lines = chunk.split("\n");

        for (const line of lines) {
          if (line.startsWith("data: ")) {
            const data = line.slice(6);
            if (data === "[DONE]") break;

            try {
              const parsed = JSON.parse(data);
              const content = parsed.choices?.[0]?.delta?.content;
              if (content) {
                result += content;
              }
            } catch (e) {
              // Ignore parsing errors for incomplete JSON
            }
          }
        }
      }

      return (
        result || "Sorry, I didn't receive a proper response. Please try again."
      );
    }
  }

  // Initialize chatbot when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new Chatbot();
  });
</script>
